LIBFT

Глава I
Вступление
Программирование на C может быть очень утомительным, если у вас нет доступа к очень полезным стандартным функциям. Этот проект позволяет вам переписать эти функции, понять их, и научиться ими пользоваться. Эта библиотека поможет вам во всех ваших будущих проектах C.
Найдите время, чтобы расширить свой libft в течение года. Но всегда обязательно
проверяйте, какие функции разрешены!

Глава II.
Общие инструкции
• Ваш проект должен быть написан в соответствии с Нормой. Если у вас есть бонусные файлы / функции, они включены в проверку нормы, и вы получите 0, если есть ошибка нормы внутри.
• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины и т. д.), кроме неопределенного поведения. Если это произойдет, ваш проект будет считается нефункциональным и получит 0 во время оценки. Даже если это бонусный файл / функция.
• Все пространство памяти, выделенное кучей, должно быть должным образом освобождено при необходимости. Утечек не должно быть.
• Если задание требует этого, вы должны отправить Makefile, который скомпилирует ваши
исходные файлы в требуемый вывод с флагами -Wall, -Wextra и -Werror и ваш Makefile не должен повторно связываться. Подстановочные знаки запрещены, префиксы @silent запрещены. Если вы хотите какой-нибудь необычный Make, добавьте для него правило.
• Ваш Makefile должен содержать как минимум правила $(NAME), all, clean, fclean и
ре.
• Чтобы превратить бонусы в свой проект, вы должны включить бонус правила в свой Makefile,
который добавит все различные заголовки, библиотеки или функции, запрещенные на
основная часть проекта. Если нет указаний, бонусы должны быть в другом файл_bonus. {c / h}. Оценка обязательной и бонусной части проводится отдельно.
• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его исходный код и его связанный Makefile в папке libft с соответствующим Makefile. Ваш проект Makefile должен скомпилировать библиотеку, используя свой Makefile, а затем скомпилировать проект.
• Мы рекомендуем вам создавать программы тестирования для вашего проекта, даже если эта работа не должна быть отправлена и не будут оцениваться. Это даст тебе шанс легко проверить свою работу и работу коллег. Вы найдете эти тесты особенно полезными во время вашей защиты. Действительно, во время защиты вы можете использовать свои тесты и / или тесты коллег, которых вы оцениваете.
• Отправьте свою работу в назначенный репозиторий git. Оцениваться будет только работа в репозитории git. Если Deepoughtt назначено оценивать вашу работу, она будет выполнена после ваших оценок коллег. Если в каком-либо разделе вашей работы время выполнения программы превышается, проект засчитывается как провал.

Глава III.
Обязательная часть
III.1 Технические требования
• Запрещено объявлять глобальные переменные.
• Если вам нужны подфункции для написания сложной функции, вы должны определить эти подфункции как статические, чтобы не публиковать их вместе с вашей библиотекой. Было бы хорошей привычкой будет делать это и в своих будущих проектах.
• Отправьте все файлы в корень вашего репозитория.
• Запрещено отправлять неиспользуемые файлы.
• Каждый .c должен компилироваться с флагами.
• Вы должны использовать команду ar для создания вашей библиотеки, использование команды libtool запрещено.

III.2 Часть 1 - Функции Libc
В этой первой части вы должны перекодировать набор функций libc, как определено в их
мануалах. Ваши функции должны будут представлять тот же прототип и поведение, что и оригиналы. Имена ваших функций должны иметь префикс «ft_». Например, strlen становится
ft_strlen.
Некоторые прототипы функций, которые вам нужно перекодировать, используют квалификатор restrict. Это ключевое слово является частью стандарта c99. Поэтому запрещено включать его в свои прототипы и скомпилируйте его с флагом -std = c99.
Вы должны перекодировать следующие функции. Эти функции не нуждаются во внешних
функциях:
• isalpha
• isdigit
• isalnum
• isascii
• isprint
• strlen
• memset
• bzero
• memcpy
• memmove
• strlcpy
• strlcat
• toupper
• tolower
• strchr
• strrchr
• strncmp
• memchr
• memcmp
• strnstr
• atoi
Вы также должны перекодировать следующие функции, используя функцию «malloc»:
• calloc
• strdup

III.3 Часть 2 - Дополнительные функции
Во второй части вы должны закодировать набор функций, которые либо не включены в
libc, или включенный в другой форме. Некоторые из этих функций могут быть полезны для написания Part 1 функции.

Глава IV.
Бонусная часть
Если вы выполнили обязательную часть, вам понравится ее дальнейшая работа. Вы можете увидеть это в последнем разделе, как бонусные баллы.
Наличие функций для управления памятью и строками очень полезно, но скоро вы
обнаружите, что наличие функций для управления списками еще более полезно. make Bonus добавит бонусные функции в библиотеку libft.a.
Вы будете использовать следующую структуру для представления элементов вашего списка. Эту структуру необходимо добавить в ваш файл libft.h.
Вот описание полей структуры t_list:
• content: данные, содержащиеся в элементе. Пустота * позволяет хранить любые
данных.
• next: адрес следующего элемента или NULL, если это последний элемент. 